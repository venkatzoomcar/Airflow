airflow:
baseUrl: http://myairflow.com
cloneDagFilesFromGit:
enabled: true
repositories:
- branch: master
name: dags
path: dags
repository: https://github.com/venkatzoomcar/airflow-eks-config.git
auth:
existingSecret: ""
fernetKey: ""
password: ""
secretKey: ""
username: user
clusterDomain: cluster.local
common:
exampleValue: common-chart
global:
imagePullSecrets: []
imageRegistry: ""
storageClass: ""
commonAnnotations: {}
commonLabels: {}
configuration: ""
dags:
existingConfigmap: ""
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/bitnami-shell
tag: 11-debian-11-r32
diagnosticMode:
args:

infinity
command:
sleep
enabled: false
executor: CeleryExecutor
existingConfigmap: ""
externalDatabase:
database: bitnami_airflow
existingSecret: ""
existingSecretPasswordKey: ""
host: localhost
password: ""
port: 5432
user: bn_airflow
externalRedis:
existingSecret: ""
existingSecretPasswordKey: ""
host: localhost
password: ""
port: 6379
username: ""
extraDeploy: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraEnvVarsSecrets: []
extraVolumeMounts: []
extraVolumes: []
fullnameOverride: ""
git:
clone:
args: []
command: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
resources: {}
dags:
enabled: false
repositories:
branch: ""
name: ""
path: ""
repository: ""
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/git
tag: 2.37.3-debian-11-r2
plugins:
enabled: false
repositories:
branch: ""
name: ""
path: ""
repository: ""
sync:
args: []
command: []
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
interval: 60
resources: {}
global:
imagePullSecrets: []
imageRegistry: ""
storageClass: ""
ingress:
annotations: {}
apiVersion: ""
enabled: false
extraHosts: []
extraPaths: []
extraRules: []
extraTls: []
hostname: airflow.local
ingressClassName: ""
path: /
pathType: ImplementationSpecific
secrets: []
selfSigned: false
tls: false
initContainers: []
kubeVersion: ""
ldap:
basedn: dc=example,dc=org
binddn: cn=admin,dc=example,dc=org
bindpw: ""
enabled: false
rolesMapping: '{ "cn=All,ou=Groups,dc=example,dc=org": ["User"], "cn=Admins,ou=Groups,dc=example,dc=org":
["Admin"], }'
rolesSyncAtLogin: "True"
searchAttribute: cn
tls:
CAFilename: ""
allowSelfSigned: true
certificatesMountPath: /opt/bitnami/airflow/conf/certs
certificatesSecret: ""
enabled: false
uri: ldap://ldap_server:389
userRegistration: "True"
userRegistrationRole: Public
loadExamples: false
metrics:
affinity: {}
containerPorts:
http: 9112
containerSecurityContext:
enabled: true
runAsNonRoot: true
runAsUser: 1001
enabled: false
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
hostAliases: []
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/airflow-exporter
tag: 0.20220314.0-debian-11-r35
lifecycleHooks: {}
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
resources:
limits: {}
requests: {}
schedulerName: ""
service:
annotations:
prometheus.io/port: '{{ .Values.metrics.service.ports.http }}'
prometheus.io/scrape: "true"
clusterIP: ""
ports:
http: 9112
sessionAffinity: None
serviceMonitor:
enabled: false
honorLabels: false
interval: ""
jobLabel: ""
labels: {}
metricRelabelings: []
namespace: ""
relabelings: []
scrapeTimeout: ""
selector: {}
tolerations: []
nameOverride: ""
postgresql:
architecture: standalone
audit:
clientMinMessages: error
logConnections: false
logDisconnections: false
logHostname: false
logLinePrefix: ""
logTimezone: ""
pgAuditLog: ""
pgAuditLogCatalog: "off"
auth:
database: bitnami_airflow
enablePostgresUser: false
existingSecret: ""
password: ""
postgresPassword: ""
replicationPassword: ""
replicationUsername: repl_user
secretKeys:
adminPasswordKey: postgres-password
replicationPasswordKey: replication-password
userPasswordKey: password
usePasswordFiles: false
username: bn_airflow
clusterDomain: cluster.local
common:
exampleValue: common-chart
global:
imagePullSecrets: []
imageRegistry: ""
postgresql:
auth:
database: ""
existingSecret: ""
password: ""
postgresPassword: ""
secretKeys:
adminPasswordKey: ""
replicationPasswordKey: ""
userPasswordKey: ""
username: ""
service:
ports:
postgresql: ""
storageClass: ""
commonAnnotations: {}
commonLabels: {}
containerPorts:
postgresql: 5432
diagnosticMode:
args:
infinity
command:
sleep
enabled: false
enabled: true
extraDeploy: []
fullnameOverride: ""
global:
imagePullSecrets: []
imageRegistry: ""
postgresql:
auth:
database: ""
existingSecret: ""
password: ""
postgresPassword: ""
secretKeys:
adminPasswordKey: ""
replicationPasswordKey: ""
userPasswordKey: ""
username: ""
service:
ports:
postgresql: ""
storageClass: ""
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/postgresql
tag: 14.5.0-debian-11-r6
kubeVersion: ""
ldap:
basedn: ""
binddn: ""
bindpw: ""
enabled: false
port: ""
prefix: ""
scheme: ""
searchAttribute: ""
searchFilter: ""
server: ""
suffix: ""
tls:
enabled: false
uri: ""
metrics:
containerPorts:
metrics: 9187
containerSecurityContext:
enabled: true
runAsNonRoot: true
runAsUser: 1001
customLivenessProbe: {}
customMetrics: {}
customReadinessProbe: {}
customStartupProbe: {}
enabled: false
extraEnvVars: []
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/postgres-exporter
tag: 0.11.1-debian-11-r0
livenessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 5
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
prometheusRule:
enabled: false
labels: {}
namespace: ""
rules: []
readinessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 5
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
resources:
limits: {}
requests: {}
service:
annotations:
prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
prometheus.io/scrape: "true"
clusterIP: ""
ports:
metrics: 9187
sessionAffinity: None
serviceMonitor:
enabled: false
honorLabels: false
interval: ""
jobLabel: ""
labels: {}
metricRelabelings: []
namespace: ""
relabelings: []
scrapeTimeout: ""
selector: {}
startupProbe:
enabled: false
failureThreshold: 15
initialDelaySeconds: 10
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 1
nameOverride: ""
networkPolicy:
egressRules:
customRules: {}
denyConnectionsToExternal: false
enabled: false
ingressRules:
primaryAccessOnlyFrom:
customRules: {}
enabled: false
namespaceSelector: {}
podSelector: {}
readReplicasAccessOnlyFrom:
customRules: {}
enabled: false
namespaceSelector: {}
podSelector: {}
metrics:
enabled: false
namespaceSelector: {}
podSelector: {}
postgresqlDataDir: /bitnami/postgresql/data
postgresqlSharedPreloadLibraries: pgaudit
primary:
affinity: {}
annotations: {}
args: []
command: []
configuration: ""
containerSecurityContext:
enabled: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
existingConfigmap: ""
existingExtendedConfigmap: ""
extendedConfiguration: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraPodSpec: {}
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
hostIPC: false
hostNetwork: false
initContainers: []
initdb:
args: ""
password: ""
postgresqlWalDir: ""
scripts: {}
scriptsConfigMap: ""
scriptsSecret: ""
user: ""
labels: {}
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
name: primary
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
persistence:
accessModes:
ReadWriteOnce
annotations: {}
dataSource: {}
enabled: true
existingClaim: ""
mountPath: /bitnami/postgresql
selector: {}
size: 8Gi
storageClass: ""
subPath: ""
pgHbaConfiguration: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 5
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
resources:
limits: {}
requests:
cpu: 250m
memory: 256Mi
schedulerName: ""
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
postgresql: ""
ports:
postgresql: 5432
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
sidecars: []
standby:
enabled: false
primaryHost: ""
primaryPort: ""
startupProbe:
enabled: false
failureThreshold: 15
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 1
terminationGracePeriodSeconds: ""
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
psp:
create: false
rbac:
create: false
rules: []
readReplicas:
affinity: {}
annotations: {}
args: []
command: []
containerSecurityContext:
enabled: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
extendedConfiguration: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraPodSpec: {}
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
hostIPC: false
hostNetwork: false
initContainers: []
labels: {}
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
name: read
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
persistence:
accessModes:
ReadWriteOnce
annotations: {}
dataSource: {}
enabled: true
existingClaim: ""
mountPath: /bitnami/postgresql
selector: {}
size: 8Gi
storageClass: ""
subPath: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 5
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
replicaCount: 1
resources:
limits: {}
requests:
cpu: 250m
memory: 256Mi
schedulerName: ""
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
postgresql: ""
ports:
postgresql: 5432
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
sidecars: []
startupProbe:
enabled: false
failureThreshold: 15
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 1
terminationGracePeriodSeconds: ""
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
replication:
applicationName: my_application
numSynchronousReplicas: 0
synchronousCommit: "off"
serviceAccount:
annotations: {}
automountServiceAccountToken: true
create: false
name: ""
shmVolume:
enabled: true
sizeLimit: ""
tls:
autoGenerated: false
certCAFilename: ""
certFilename: ""
certKeyFilename: ""
certificatesSecret: ""
crlFilename: ""
enabled: false
preferServerCiphers: true
volumePermissions:
containerSecurityContext:
runAsUser: 0
enabled: false
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/bitnami-shell
tag: 11-debian-11-r27
resources:
limits: {}
requests: {}
rbac:
create: false
rules: []
redis:
architecture: standalone
auth:
enabled: true
existingSecret: ""
existingSecretPasswordKey: ""
password: ""
sentinel: true
usePasswordFiles: false
clusterDomain: cluster.local
common:
exampleValue: common-chart
global:
imagePullSecrets: []
imageRegistry: ""
redis:
password: ""
storageClass: ""
commonAnnotations: {}
commonConfiguration: |-
Enable AOF https://redis.io/topics/persistence#append-only-file
appendonly yes
Disable RDB persistence, AOF persistence already enabled.
save ""
commonLabels: {}
diagnosticMode:
args:
infinity
command:
sleep
enabled: false
enabled: true
existingConfigmap: ""
extraDeploy: []
fullnameOverride: ""
global:
imagePullSecrets: []
imageRegistry: ""
redis:
password: ""
storageClass: ""
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/redis
tag: 7.0.4-debian-11-r17
kubeVersion: ""
master:
affinity: {}
args: []
command: []
configuration: ""
containerPorts:
redis: 6379
containerSecurityContext:
enabled: true
runAsUser: 1001
count: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
disableCommands:
FLUSHDB
FLUSHALL
dnsConfig: {}
dnsPolicy: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraFlags: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
initContainers: []
kind: StatefulSet
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 5
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
persistence:
accessModes:
ReadWriteOnce
annotations: {}
dataSource: {}
enabled: true
existingClaim: ""
medium: ""
path: /data
selector: {}
size: 8Gi
sizeLimit: ""
storageClass: ""
subPath: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
preExecCmds: []
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 1
resources:
limits: {}
requests: {}
schedulerName: ""
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
internalTrafficPolicy: Cluster
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
redis: ""
ports:
redis: 6379
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
shareProcessNamespace: false
sidecars: []
startupProbe:
enabled: false
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 5
terminationGracePeriodSeconds: 30
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
metrics:
command: []
containerSecurityContext:
enabled: true
runAsUser: 1001
enabled: false
extraArgs: {}
extraEnvVars: []
extraVolumeMounts: []
extraVolumes: []
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/redis-exporter
tag: 1.43.1-debian-11-r4
podAnnotations:
prometheus.io/port: "9121"
prometheus.io/scrape: "true"
podLabels: {}
prometheusRule:
additionalLabels: {}
enabled: false
namespace: ""
rules: []
redisTargetHost: localhost
resources:
limits: {}
requests: {}
service:
annotations: {}
externalTrafficPolicy: Cluster
extraPorts: []
loadBalancerIP: ""
loadBalancerSourceRanges: []
port: 9121
type: ClusterIP
serviceMonitor:
additionalLabels: {}
enabled: false
honorLabels: false
interval: 30s
metricRelabelings: []
namespace: ""
relabellings: []
scrapeTimeout: ""
nameOverride: ""
networkPolicy:
allowExternal: true
enabled: false
extraEgress: []
extraIngress: []
ingressNSMatchLabels: {}
ingressNSPodMatchLabels: {}
pdb:
create: false
maxUnavailable: ""
minAvailable: 1
podSecurityPolicy:
create: false
enabled: false
rbac:
create: false
rules: []
replica:
affinity: {}
args: []
autoscaling:
enabled: false
maxReplicas: 11
minReplicas: 1
targetCPU: ""
targetMemory: ""
command: []
configuration: ""
containerPorts:
redis: 6379
containerSecurityContext:
enabled: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
disableCommands:
FLUSHDB
FLUSHALL
dnsConfig: {}
dnsPolicy: ""
externalMaster:
enabled: false
host: ""
port: 6379
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraFlags: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
initContainers: []
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 5
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
persistence:
accessModes:
ReadWriteOnce
annotations: {}
dataSource: {}
enabled: true
existingClaim: ""
medium: ""
path: /data
selector: {}
size: 8Gi
sizeLimit: ""
storageClass: ""
subPath: ""
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podManagementPolicy: ""
podSecurityContext:
enabled: true
fsGroup: 1001
preExecCmds: []
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 1
replicaCount: 3
resources:
limits: {}
requests: {}
schedulerName: ""
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
internalTrafficPolicy: Cluster
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
redis: ""
ports:
redis: 6379
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
shareProcessNamespace: false
sidecars: []
startupProbe:
enabled: true
failureThreshold: 22
initialDelaySeconds: 10
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
terminationGracePeriodSeconds: 30
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
secretAnnotations: {}
sentinel:
args: []
automateClusterRecovery: false
command: []
configuration: ""
containerPorts:
sentinel: 26379
containerSecurityContext:
enabled: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
downAfterMilliseconds: 60000
enabled: false
externalMaster:
enabled: false
host: ""
port: 6379
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumeMounts: []
extraVolumes: []
failoverTimeout: 180000
getMasterTimeout: 220
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/redis-sentinel
tag: 7.0.4-debian-11-r14
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 5
masterSet: mymaster
parallelSyncs: 1
persistence:
accessModes:
ReadWriteOnce
annotations: {}
dataSource: {}
enabled: false
medium: ""
selector: {}
size: 100Mi
storageClass: ""
preExecCmds: []
quorum: 2
readinessProbe:
enabled: true
failureThreshold: 5
initialDelaySeconds: 20
periodSeconds: 5
successThreshold: 1
timeoutSeconds: 1
resources:
limits: {}
requests: {}
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
redis: ""
sentinel: ""
ports:
redis: 6379
sentinel: 26379
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
startupProbe:
enabled: true
failureThreshold: 22
initialDelaySeconds: 10
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
terminationGracePeriodSeconds: 30
serviceAccount:
annotations: {}
automountServiceAccountToken: true
create: true
name: ""
sysctl:
command: []
enabled: false
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/bitnami-shell
tag: 11-debian-11-r29
mountHostSys: false
resources:
limits: {}
requests: {}
tls:
authClients: true
autoGenerated: false
certCAFilename: ""
certFilename: ""
certKeyFilename: ""
certificatesSecret: ""
dhParamsFilename: ""
enabled: false
existingSecret: ""
useExternalDNS:
additionalAnnotations: {}
annotationKey: external-dns.alpha.kubernetes.io/
enabled: false
suffix: ""
volumePermissions:
containerSecurityContext:
runAsUser: 0
enabled: false
image:
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/bitnami-shell
tag: 11-debian-11-r29
resources:
limits: {}
requests: {}
scheduler:
affinity: {}
args: []
command: []
containerSecurityContext:
enabled: true
runAsNonRoot: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraEnvVarsSecrets: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/airflow-scheduler
tag: 2.3.4-debian-11-r4
initContainers: []
lifecycleHooks: {}
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
pdb:
create: false
maxUnavailable: ""
minAvailable: 1
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
priorityClassName: ""
replicaCount: 1
resources:
limits: {}
requests: {}
schedulerName: ""
sidecars: []
terminationGracePeriodSeconds: ""
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
service:
annotations: {}
clusterIP: ""
externalTrafficPolicy: Cluster
extraPorts: []
loadBalancerIP: ""
loadBalancerSourceRanges: []
nodePorts:
http: ""
ports:
http: 8080
sessionAffinity: None
sessionAffinityConfig: {}
type: ClusterIP
serviceAccount:
annotations: {}
automountServiceAccountToken: true
create: false
name: ""
sidecars: []
web:
affinity: {}
args: []
baseUrl: ""
command: []
containerPorts:
http: 8080
containerSecurityContext:
enabled: true
runAsNonRoot: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
existingConfigmap: ""
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraEnvVarsSecrets: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/airflow
tag: 2.3.4-debian-11-r5
initContainers: []
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 180
periodSeconds: 20
successThreshold: 1
timeoutSeconds: 5
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
pdb:
create: false
maxUnavailable: ""
minAvailable: 1
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
replicaCount: 1
resources:
limits: {}
requests: {}
schedulerName: ""
sidecars: []
startupProbe:
enabled: false
failureThreshold: 15
initialDelaySeconds: 60
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 1
terminationGracePeriodSeconds: ""
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
worker:
affinity: {}
args: []
autoscaling:
enabled: false
maxReplicas: 3
minReplicas: 1
targetCPU: 80
targetMemory: 80
command: []
containerPorts:
http: 8793
containerSecurityContext:
enabled: true
runAsNonRoot: true
runAsUser: 1001
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraEnvVarsSecrets: []
extraVolumeClaimTemplates: []
extraVolumeMounts: []
extraVolumes: []
hostAliases: []
image:
debug: false
digest: ""
pullPolicy: IfNotPresent
pullSecrets: []
registry: docker.io
repository: bitnami/airflow-worker
tag: 2.3.4-debian-11-r4
initContainers: []
lifecycleHooks: {}
livenessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 180
periodSeconds: 20
successThreshold: 1
timeoutSeconds: 5
nodeAffinityPreset:
key: ""
type: ""
values: []
nodeSelector: {}
pdb:
create: false
maxUnavailable: ""
minAvailable: 1
podAffinityPreset: ""
podAnnotations: {}
podAntiAffinityPreset: soft
podLabels: {}
podSecurityContext:
enabled: true
fsGroup: 1001
podTemplate: {}
priorityClassName: ""
readinessProbe:
enabled: true
failureThreshold: 6
initialDelaySeconds: 30
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 5
replicaCount: 1
resources:
limits: {}
requests: {}
schedulerName: ""
sidecars: []
startupProbe:
enabled: false
failureThreshold: 15
initialDelaySeconds: 60
periodSeconds: 10
successThreshold: 1
timeoutSeconds: 1
terminationGracePeriodSeconds: ""
tolerations: []
topologySpreadConstraints: []
updateStrategy:
rollingUpdate: {}
type: RollingUpdate
